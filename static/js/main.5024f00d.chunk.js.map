{"version":3,"sources":["todo/observableTodoStore.js","todo/TodoItem.js","todo/TodoList.js","index.js"],"names":["observableTodoStore","todos","pendingRequests","makeObservable","this","observable","completedTodosCount","computed","report","addTodo","action","loadMore","autorun","console","log","task","push","completed","assignee","setTimeout","Math","random","filter","todo","length","nextTodo","find","peopleStore","name","TodoView","observer","onDoubleClick","prompt","type","checked","onChange","TodoList","store","map","idx","TodoItem","onClick","ReactDOM","render","document","getElementById"],"mappings":"+MAgDMA,EAAsB,I,WA1C1B,aAAe,IAAD,gCAHdC,MAAQ,GAGM,KAFdC,gBAAkB,EAGhBC,yBAAeC,KAAM,CACnBH,MAAOI,aACPH,gBAAiBG,aACjBC,oBAAqBC,WACrBC,OAAQD,WACRE,QAASC,SACTC,SAAUD,WAEZE,mBAAQ,kBAAMC,QAAQC,IAAI,EAAKN,W,oDAgBzBO,GACNX,KAAKH,MAAMe,KAAK,CACdD,KAAMA,EACNE,WAAW,EACXC,SAAU,S,iCAKZlB,EAAoBE,kBACpBiB,YAAW,WACTnB,EAAoBS,QAAQ,eAAiBW,KAAKC,UAClDrB,EAAoBE,oBACnB,O,0CAzBH,OAAOE,KAAKH,MAAMqB,QAAO,SAACC,GAAD,OAA6B,IAAnBA,EAAKN,aAAoBO,S,6BAI5D,GAA0B,IAAtBpB,KAAKH,MAAMuB,OAAc,MAAO,SACpC,IAAMC,EAAWrB,KAAKH,MAAMyB,MAAK,SAACH,GAAD,OAA6B,IAAnBA,EAAKN,aAChD,MACE,sBAAeQ,EAAWA,EAASV,KAAO,SAA1C,2BACaX,KAAKE,oBADlB,YACyCF,KAAKH,MAAMuB,Y,MAsB7CG,EAActB,qBAAW,CAAC,CAAEuB,KAAM,UAAY,CAAEA,KAAM,QAEnE5B,EAAoBC,MAAMe,KAAK,CAAED,KAAM,QAASE,WAAW,IAC3DjB,EAAoBC,MAAMe,KAAK,CAAED,KAAM,QAASE,WAAW,IAE3DjB,EAAoBC,MAAM,GAAGiB,SAAWS,EAAY,GACpD3B,EAAoBC,MAAM,GAAGiB,SAAWS,EAAY,GAErC3B,QChCA6B,EAtBEC,oBAAS,YAAe,IAAZP,EAAW,EAAXA,KAS3B,OACE,qBAAIQ,cALW,WACfR,EAAKR,KAAOiB,OAAO,YAAaT,EAAKR,OAASQ,EAAKR,MAInD,UACE,uBACEkB,KAAK,WACLC,QAASX,EAAKN,UACdkB,SAboB,WACxBZ,EAAKN,WAAaM,EAAKN,aAcpBM,EAAKR,KACLQ,EAAKL,UAAY,wCAAWK,EAAKL,SAASU,cCf3CQ,EAAWN,oBAAS,YAAgB,IAAbO,EAAY,EAAZA,MAK3B,OACE,gCACGA,EAAM7B,OACP,6BACG6B,EAAMpC,MAAMqC,KAAI,SAACf,EAAMgB,GAAP,OACf,cAACC,EAAD,CAAUjB,KAAMA,GAAWgB,QAG9BF,EAAMnC,gBAAkB,EAAI,iDAAgC,KAC7D,wBAAQuC,QAbM,WAChBJ,EAAM5B,QAAQuB,OAAO,oBAAqB,gBAYxC,sBACA,+DACA,uBACA,wBAAQS,QAASJ,EAAM1B,SAAvB,6BAKS,oBAAM,cAACyB,EAAD,CAAUC,MAAOrC,K,MCtBtC0C,IAASC,OAAO,cAAC,EAAD,IAAcC,SAASC,eAAe,W","file":"static/js/main.5024f00d.chunk.js","sourcesContent":["import { observable, computed, action, autorun, makeObservable } from 'mobx';\r\n\r\nclass ObservableTodoStore {\r\n  todos = [];\r\n  pendingRequests = 0;\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      todos: observable,\r\n      pendingRequests: observable,\r\n      completedTodosCount: computed,\r\n      report: computed,\r\n      addTodo: action,\r\n      loadMore: action,\r\n    });\r\n    autorun(() => console.log(this.report));\r\n  }\r\n\r\n  get completedTodosCount() {\r\n    return this.todos.filter((todo) => todo.completed === true).length;\r\n  }\r\n\r\n  get report() {\r\n    if (this.todos.length === 0) return '<none>';\r\n    const nextTodo = this.todos.find((todo) => todo.completed === false);\r\n    return (\r\n      `Next todo: \"${nextTodo ? nextTodo.task : '<none>'}\". ` +\r\n      `Progress: ${this.completedTodosCount}/${this.todos.length}`\r\n    );\r\n  }\r\n\r\n  addTodo(task) {\r\n    this.todos.push({\r\n      task: task,\r\n      completed: false,\r\n      assignee: null,\r\n    });\r\n  }\r\n\r\n  loadMore() {\r\n    observableTodoStore.pendingRequests++;\r\n    setTimeout(() => {\r\n      observableTodoStore.addTodo('Random Todo ' + Math.random());\r\n      observableTodoStore.pendingRequests--;\r\n    }, 2000);\r\n  }\r\n}\r\n\r\nconst observableTodoStore = new ObservableTodoStore();\r\nexport const peopleStore = observable([{ name: 'Michel' }, { name: 'Me' }]);\r\n\r\nobservableTodoStore.todos.push({ task: 'test1', completed: false });\r\nobservableTodoStore.todos.push({ task: 'test2', completed: false });\r\n\r\nobservableTodoStore.todos[0].assignee = peopleStore[0];\r\nobservableTodoStore.todos[1].assignee = peopleStore[1];\r\n\r\nexport default observableTodoStore;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nconst TodoView = observer(({ todo }) => {\r\n  const onToggleCompleted = () => {\r\n    todo.completed = !todo.completed;\r\n  };\r\n\r\n  const onRename = () => {\r\n    todo.task = prompt('Task name', todo.task) || todo.task;\r\n  };\r\n\r\n  return (\r\n    <li onDoubleClick={onRename}>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={todo.completed}\r\n        onChange={onToggleCompleted}\r\n      />\r\n      {todo.task}\r\n      {todo.assignee && <small> - {todo.assignee.name}</small>}\r\n    </li>\r\n  );\r\n});\r\n\r\nexport default TodoView;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport observableTodoStore from './observableTodoStore';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TodoList = observer(({ store }) => {\r\n  const onNewTodo = () => {\r\n    store.addTodo(prompt('Enter a new todo:', 'coffee plz'));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {store.report}\r\n      <ul>\r\n        {store.todos.map((todo, idx) => (\r\n          <TodoItem todo={todo} key={idx} />\r\n        ))}\r\n      </ul>\r\n      {store.pendingRequests > 0 ? <marquee>Loading...</marquee> : null}\r\n      <button onClick={onNewTodo}>New Todo</button>\r\n      <i> (double-click a todo to edit)</i>\r\n      <br />\r\n      <button onClick={store.loadMore}>Load more</button>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default () => <TodoList store={observableTodoStore} />;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './todo/TodoList';\nimport './index.css';\n\nReactDOM.render(<TodoList />, document.getElementById('root'));\n"],"sourceRoot":""}